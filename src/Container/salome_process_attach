#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2024  CEA, EDF
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
#

# -ex bt
# -x script.gdb
# -nx to skip .gdbinit

from pathlib import Path

def main():
  DFT_PID_VALUE = -1

  import argparse
  from pathlib import Path
  import salome
  salome.salome_init()
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description = "To be used in association of a process launched nested inside a salome_process_launcher session.")
  parser.add_argument("rendez_vous_file", type=Path, help="Rendez vous file specified in corresponding salome_process_launcher.")
  parser.add_argument("gdb_cmds_file", type=Path, help="GDB commands to be executed remotely.")
  parser.add_argument("--pid", dest="pid_to_track", type=int, default=DFT_PID_VALUE, help="PID of process, the debugger will be attached on ( typically a son or a little son process of process whose PID is registred inside salome_process_launcher process)")
  args = parser.parse_args()
  rdv, gdbfile = args.rendez_vous_file, args.gdb_cmds_file
  if not rdv.exists():
    raise RuntimeError(f"Rendez-vous file {rdv} does not exist !")
  gdbfile = gdbfile.absolute()
  if not gdbfile.exists():
    raise RuntimeError(f"GDB commands file {gdbfile} does not exist !")
  gdbfile = gdbfile.absolute()
  remoteNS = salome.naming_service.LoadIORInFile(f"{rdv}")
  remoteGlbs = salome.orb.string_to_object( remoteNS.Resolve("PID_TO_TRACK").decode() )
  import pickle
  pidToTrack = pickle.loads( remoteGlbs.getAttr("CTX0") )["pid"]
  if args.pid_to_track != DFT_PID_VALUE:
    pidToTrack = args.pid_to_track
  print(f"PID tracked : {pidToTrack}")
  returncode, stdout, stderr = remoteGlbs.execute(["gdb","-batch","-x",f"{gdbfile}","attach",str(pidToTrack)])
  st = f"""returnCode = {returncode}
  stdout = {stdout.decode()}
  stderr = {stderr.decode()}
  """
  print(st)

if __name__ == "__main__":
  main()
